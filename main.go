package main

import (
	"fmt"
	"io"
	"io/fs"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

const nixTmpl = `# Autogenerated by Dotfiles
{
  packageOverrides = pkgs: with pkgs; {
    defaultSystem = pkgs.buildEnv {
      name = "default";
      paths = [
        {{- range . }}
        {{.}}
        {{- end }}
      ];
    };
  };
}
`

const ghTmpl = `
if [ ! -d "$HOME/projects/{{.Owner}}/{{.Repo}}" ] ; then
    gh repo clone {{.Owner}}/{{.Repo}} -- $HOME/projects/{{.Owner}}/{{.Repo}}
fi
`

type Tool struct {
	NixPackages []string
	GitHub      []GitHub
}

type Exporter func(io.Writer, []Tool) error

type GitHub struct {
	Owner string
	Repo  string
}

func GenNix(writer io.Writer, tools []Tool) error {
	nixTemplate, err := template.New("nix").Parse(nixTmpl)
	if err != nil {
		return err
	}

	pkgs := []string{}
	for _, t := range tools {
		for _, pkg := range t.NixPackages {
			pkgs = append(pkgs, pkg)
		}
	}

	return nixTemplate.Execute(writer, pkgs)
}

func GenGitHub(writer io.Writer, tools []Tool) error {
	writer.Write([]byte("#! /bin/bash\n"))
	writer.Write([]byte("set -exu\n"))

	ghTemplate, err := template.New("github").Parse(ghTmpl)
	if err != nil {
		return err
	}

	for _, t := range tools {
		for _, gh := range t.GitHub {
			err := ghTemplate.Execute(writer, gh)
			if err != nil {
				return err
			}
		}
	}

	return nil
}

func GenSymlinks(writer io.Writer, _ []Tool) error {
	writer.Write([]byte("#! /bin/bash\n"))
	writer.Write([]byte("set -exu\n\n"))
	writer.Write([]byte("DOTFILES=$HOME/projects/miniscruff/dotfiles\n\n"))

	// first walk the path to find all directories
	filepath.Walk("settings", func(path string, info fs.FileInfo, err error) error {
		if !info.IsDir() {
			return nil
		}

		if path == "settings" {
			return nil
		}

		realPath := strings.Replace(path, "settings", "$HOME", 1)
		writer.Write([]byte(fmt.Sprintf("mkdir -p %v\n", realPath)))
		return nil
	})
	writer.Write([]byte(fmt.Sprintf("\n")))

	// then walk to find all files
	filepath.Walk("settings", func(path string, info fs.FileInfo, err error) error {
		if info.IsDir() {
			return nil
		}

		trimmedPath := strings.TrimPrefix(path, "settings/")
		writer.Write([]byte(fmt.Sprintf(
			"ln -f $DOTFILES/settings/%v $HOME/%v\n",
			trimmedPath,
			trimmedPath,
		)))
		return nil
	})
	writer.Write([]byte(fmt.Sprintf("\n")))

	return nil
}

func ExportToFile(exportPath string, tools []Tool, exporter Exporter) error {
	f, err := os.Create(exportPath)
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	return exporter(f, tools)
}

func main() {
	tools := []Tool{
		{
			NixPackages: []string{"alacritty"},
			GitHub: []GitHub{
				{
					Owner: "catppuccin",
					Repo:  "alacritty",
				},
			},
		},
		{
			NixPackages: []string{
				"i3-gaps",
				"i3lock",
				"i3status",
				"i3blocks",
				"rofi",
				"feh",
				"ranger",
				"highlight",
				"atool",
			},
			GitHub: []GitHub{
				{
					Owner: "vivien",
					Repo:  "i3blocks-contrib",
				},
			},
		},
		{
			NixPackages: []string{"neovim"},
		},
		{
			NixPackages: []string{"zsh", "oh-my-zsh"},
		},
		{
			NixPackages: []string{"gh"},
			GitHub: []GitHub{
				{Owner: "miniscruff", Repo: "changie"},
				{Owner: "miniscruff", Repo: "changie-action"},
				{Owner: "miniscruff", Repo: "genenv"},
			},
		},
	}

	err := ExportToFile("settings/.config/nixpkgs/config.nix", tools, GenNix)
	if err != nil {
		log.Fatal(err)
	}

	err = ExportToFile("install/git-packages.sh", tools, GenGitHub)
	if err != nil {
		log.Fatal(err)
	}

	err = ExportToFile("install/symlinks.sh", tools, GenSymlinks)
	if err != nil {
		log.Fatal(err)
	}
}
